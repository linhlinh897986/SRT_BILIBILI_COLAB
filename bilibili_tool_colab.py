#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
C√îNG C·ª§ T·ª∞ ƒê·ªòNG H√ìA BILIBILI - SRT - GEMINI

Phi√™n b·∫£n h·ª£p nh·∫•t, m·ªôt l·∫ßn ch·∫°y, th·ª±c thi hai lu·ªìng song song:
- Lu·ªìng 1: T·∫£i file audio t·ª´ Bilibili.
- Lu·ªìng 2: Theo d√µi, h·ª£p nh·∫•t, d·ªãch v√† upload file SRT.
"""

import os
import sys
import subprocess
import re
import requests
import glob
import base64
import time
import threading
import getpass
from urllib.parse import urlparse

# ==============================================================================
# SECTION 1: C·∫§U H√åNH TO√ÄN C·ª§C
# ==============================================================================
UPLOAD_DIR = "colab_upload"
INPUT_SRT_DIR = "colab_input_srt"
OUTPUT_SRT_DIR = "colab_output_srt"
FINAL_VI_DIR = "colab_final_vi_srt"
CONTEXT_DIR = "colab_context_srt"

DEFAULT_REPO_URL = "https://github.com/linhlinh897986/Truyen_SRT"
TARGET_LANGUAGE = "vi"
SRT_MERGE_GAP_MS = 700
CHECK_INTERVAL_SECONDS = 10

# ==============================================================================
# SECTION 2: C√ÅC H√ÄM LOGIC
# ==============================================================================

def run_bilibili_download(urls, download_folder):
    try:
        os.makedirs(download_folder, exist_ok=True)
        print("-" * 20)
        print(f"B·∫Øt ƒë·∫ßu t·∫£i audio v√†o th∆∞ m·ª•c: {download_folder}")
        for i, url in enumerate(urls, 1):
            print(f"üîó [{i}/{len(urls)}] ƒêang x·ª≠ l√Ω: {url}")
            cmd = ["yt-dlp", "--extract-audio", "--audio-format", "mp3", "-o", os.path.join(download_folder, f"%(title)s.%(ext)s"), url]
            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, encoding='utf-8', errors='replace', bufsize=1)
            for line in iter(process.stdout.readline, ''):
                if line: print(line.strip())
            process.wait()
            print("‚úÖ Ho√†n t·∫•t link." if process.returncode == 0 else "‚ùå L·ªói khi t·∫£i link.")
        print(f"üìÇ T·∫•t c·∫£ audio ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: {os.path.abspath(download_folder)}")
    except Exception as e:
        print(f"‚ùå L·ªói nghi√™m tr·ªçng khi t·∫£i xu·ªëng: {e}")

def srt_time_to_ms(time_str: str) -> int:
    try:
        h, m, s_ms = time_str.replace(",", ".").split(':')
        s, ms = s_ms.split('.')
        return int(h) * 3600000 + int(m) * 60000 + int(s) * 1000 + int(ms)
    except Exception:
        return 0

def merge_sentence_logic(content: str, gap_threshold_ms: int):
    blocks = [b.strip() for b in re.split(r"\n{2,}", content.replace('\r\n', '\n').strip()) if b.strip()]
    entries = []
    for block in blocks:
        lines = block.split('\n')
        if len(lines) >= 2 and '-->' in lines[1]:
            try:
                start_str, end_str_parts = lines[1].split(' --> ')
                entries.append({'start': start_str.strip(), 'end': end_str_parts.split(' ')[0].strip(), 'text': "\n".join(lines[2:]).strip()})
            except (ValueError, IndexError): pass
    if not entries: return ""
    merged_blocks, current_fragments = [], []
    sentence_terminator_re = re.compile(r'[\.,„ÄÇÔºå?!‚Ä¶]+$')
    def finalize_block(fragments):
        if not fragments: return None
        full_text = "".join([f['text'] for f in fragments])
        return {'start': fragments[0]['start'], 'end': fragments[-1]['end'], 'text': full_text.strip()}
    for entry in entries:
        if not current_fragments: current_fragments.append(entry); continue
        prev_entry = current_fragments[-1]
        gap = srt_time_to_ms(entry['start']) - srt_time_to_ms(prev_entry['end'])
        if sentence_terminator_re.search(prev_entry['text']) or gap > gap_threshold_ms:
            block = finalize_block(current_fragments)
            if block: merged_blocks.append(block)
            current_fragments = [entry]
        else: current_fragments.append(entry)
    block = finalize_block(current_fragments)
    if block: merged_blocks.append(block)
    output_blocks = [f"{i}\n{b['start']} --> {b['end']}\n{b['text']}" for i, b in enumerate(merged_blocks, 1)]
    return "\n\n".join(output_blocks)

def parse_github_url(url):
    parsed = urlparse(url)
    path_parts = parsed.path.strip('/').split('/')
    if len(path_parts) < 2: raise ValueError("URL kh√¥ng h·ª£p l·ªá.")
    return path_parts[0], path_parts[1], 'main'

def upload_to_github(owner, repo, branch, target_path, file_content_bytes, commit_message, token):
    api_url = f"https://api.github.com/repos/{owner}/{repo}/contents/{target_path}"
    headers = {'Authorization': f'token {token}'}
    base64_content = base64.b64encode(file_content_bytes).decode('utf-8')
    get_response = requests.get(api_url, headers=headers)
    sha = get_response.json()['sha'] if get_response.status_code == 200 else None
    data = {"message": commit_message, "content": base64_content, "branch": branch}
    if sha: data["sha"] = sha
    put_response = requests.put(api_url, headers=headers, json=data)
    put_response.raise_for_status()
    print(f"‚úÖ ƒê√£ upload th√†nh c√¥ng l√™n GitHub: {target_path}")

def parse_srt(content):
    content = content.strip().replace('\r\n', '\n') + '\n\n'
    matches = re.findall(r'(\d+)\s*\n(\d{2}:\d{2}:\d{2},\d{3})\s*-->\s*(\d{2}:\d{2}:\d{2},\d{3})\s*\n([\s\S]+?)\n\n', content, re.MULTILINE)
    return [{'index': m[0], 'start': m[1], 'end': m[2], 'text': m[3].strip()} for m in matches]

def call_gemini_cli(prompt_text, context_dir):
    command = f'gemini -a --include-directories "{context_dir}"'
    try:
        result = subprocess.run(command, input=prompt_text, capture_output=True, text=True, check=True, encoding='utf-8', shell=True)
        return result.stdout
    except FileNotFoundError: print("L·ªñI: Kh√¥ng t√¨m th·∫•y l·ªánh 'gemini'."); raise
    except subprocess.CalledProcessError as e: print(f"L·ªói khi ch·∫°y Gemini CLI: {e.stderr}"); raise

def build_new_srt(subtitles, translated_texts):
    new_content = []
    for sub in subtitles:
        index = sub['index']
        translated_text = translated_texts.get(index, sub['text'])
        new_content.append(f"{index}\n{sub['start']} --> {sub['end']}\n{translated_text}\n")
    return "\n".join(new_content)

def parse_gemini_output(output):
    translated_texts = {}
    for line in output.strip().split('\n'):
        match = re.match(r'\[(\d+)\]\s*(.*)', line)
        if match: translated_texts[match.group(1)] = match.group(2)
    return translated_texts

def list_github_dirs_recursive(owner, repo, path, headers):
    api_url = f"https://api.github.com/repos/{owner}/{repo}/contents/{path}"
    try:
        response = requests.get(api_url, headers=headers)
        response.raise_for_status()
        time.sleep(0.2)
    except requests.exceptions.RequestException:
        return []
    all_dirs = []
    items = response.json()
    if not isinstance(items, list): return []
    for item in items:
        if item['type'] == 'dir':
            all_dirs.append(item['path'])
            all_dirs.extend(list_github_dirs_recursive(owner, repo, item['path'], headers))
    return all_dirs

# ==============================================================================
# SECTION 3: C√ÅC LU·ªíNG V√Ä H√ÄM MAIN
# ==============================================================================

def select_github_dir_interactive(owner, repo, token):
    print("\nƒêang l·∫•y danh s√°ch th∆∞ m·ª•c t·ª´ kho GitHub...")
    headers = {'Authorization': f'token {token}'}
    try:
        root_dirs = list_github_dirs_recursive(owner, repo, "", headers)
        all_dirs = ["/ (Th∆∞ m·ª•c g·ªëc)"] + sorted(list(set(root_dirs)))
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch th∆∞ m·ª•c: {e}")
        return input("Vui l√≤ng nh·∫≠p th·ªß c√¥ng t√™n th∆∞ m·ª•c: ")

    print("Ch·ªçn m·ªôt th∆∞ m·ª•c ƒë·ªÉ l∆∞u file SRT ƒë√£ d·ªãch:")
    for i, dir_name in enumerate(all_dirs):
        print(f"  {i}: {dir_name}")
    print(f"  {len(all_dirs)}: **T·∫°o th∆∞ m·ª•c m·ªõi**")

    while True:
        try:
            choice = int(input(f"L·ª±a ch·ªçn c·ªßa b·∫°n [0-{len(all_dirs)}]: "))
            if 0 <= choice < len(all_dirs):
                selected_dir = all_dirs[choice]
                return "" if selected_dir == "/ (Th∆∞ m·ª•c g·ªëc)" else selected_dir
            elif choice == len(all_dirs):
                new_dir = input("Nh·∫≠p ƒë∆∞·ªùng d·∫´n cho th∆∞ m·ª•c m·ªõi: ")
                return new_dir.strip("/")
            else:
                print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
        except ValueError:
            print("Vui l√≤ng nh·∫≠p m·ªôt s·ªë.")

def downloader_thread_func(urls, download_folder):
    print("üöÄ [Lu·ªìng 1] B·∫Øt ƒë·∫ßu t·∫£i xu·ªëng...")
    run_bilibili_download(urls, download_folder)
    print("‚úÖ [Lu·ªìng 1] ƒê√£ t·∫£i xong t·∫•t c·∫£ c√°c link.")

def processing_thread_func(stop_event, github_details):
    print(f"üöÄ [Lu·ªìng 2] B·∫Øt ƒë·∫ßu theo d√µi th∆∞ m·ª•c '{INPUT_SRT_DIR}'...")
    processed_files = set()
    while not stop_event.is_set():
        try:
            srt_files = glob.glob(os.path.join(INPUT_SRT_DIR, '*.srt'))
            new_files = [f for f in srt_files if os.path.basename(f) not in processed_files]
            for filepath in new_files:
                filename = os.path.basename(filepath)
                print(f"‚ö° [Lu·ªìng 2] Ph√°t hi·ªán file m·ªõi: {filename}")
                try:
                    with open(filepath, "r", encoding="utf-8") as f: content = f.read()
                    merged_content = merge_sentence_logic(content, SRT_MERGE_GAP_MS)
                    if not merged_content.strip():
                        print(f"‚ö†Ô∏è [Lu·ªìng 2] B·ªè qua file r·ªóng: {filename}"); processed_files.add(filename); continue
                    merged_filename = os.path.splitext(filename)[0] + "_merged.srt"
                    merged_filepath = os.path.join(OUTPUT_SRT_DIR, merged_filename)
                    with open(merged_filepath, "w", encoding="utf-8") as f: f.write(merged_content)
                    print(f"üëç [Lu·ªìng 2] ƒê√£ h·ª£p nh·∫•t c√¢u: {merged_filename}")
                    subtitles = parse_srt(merged_content)
                    if not subtitles: print(f"‚ö†Ô∏è [Lu·ªìng 2] Kh√¥ng c√≥ kh·ªëi SRT: {merged_filename}"); processed_files.add(filename); continue
                    prompt_text = "\n".join([f"[{sub['index']}] {sub['text'].replace(os.linesep, ' ')}" for sub in subtitles])
                    full_prompt = f"D·ªãch c√°c d√≤ng ph·ª• ƒë·ªÅ sau sang ng√¥n ng·ªØ '{TARGET_LANGUAGE}'. Gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng [s·ªë]:\n{prompt_text}"
                    gemini_output = call_gemini_cli(full_prompt, CONTEXT_DIR)
                    translated_texts = parse_gemini_output(gemini_output)
                    new_srt_content = build_new_srt(subtitles, translated_texts)
                    translated_filename = f"{os.path.splitext(filename)[0]}.{TARGET_LANGUAGE}.srt"
                    final_filepath = os.path.join(FINAL_VI_DIR, translated_filename)
                    context_filepath = os.path.join(CONTEXT_DIR, translated_filename)
                    with open(final_filepath, 'w', encoding='utf-8') as f: f.write(new_srt_content)
                    with open(context_filepath, 'w', encoding='utf-8') as f: f.write(new_srt_content)
                    print(f"üåê [Lu·ªìng 2] ƒê√£ d·ªãch xong: {translated_filename}")
                    target_path_github = f"{github_details['dir']}/{translated_filename}".lstrip('/')
                    commit_message = f"D·ªãch t·ª± ƒë·ªông: {translated_filename}"
                    upload_to_github(github_details['owner'], github_details['repo'], github_details['branch'], target_path_github, new_srt_content.encode('utf-8'), commit_message, github_details['token'])
                except Exception as e:
                    print(f"‚ùå [Lu·ªìng 2] L·ªói x·ª≠ l√Ω file {filename}: {e}")
                finally:
                    processed_files.add(filename)
                    print("-" * 10)
            time.sleep(CHECK_INTERVAL_SECONDS)
        except Exception as e:
            print(f"‚ùå [Lu·ªìng 2] L·ªói nghi√™m tr·ªçng: {e}")
            time.sleep(CHECK_INTERVAL_SECONDS)
    print("üõë [Lu·ªìng 2] ƒê√£ d·ª´ng.")

def main():
    print("=======================================================")
    print("== TOOL T·ª∞ ƒê·ªòNG H√ìA BILIBILI - D·ªäCH SRT (1 L·∫¶N CH·∫†Y) == ")
    print("=======================================================")

    # 1. C√†i ƒë·∫∑t & t·∫°o th∆∞ m·ª•c
    print("\n--- B∆∞·ªõc 1: Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng ---")
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "-q", "yt-dlp", "google-generativeai"], check=True)
        for dirname in [UPLOAD_DIR, INPUT_SRT_DIR, OUTPUT_SRT_DIR, FINAL_VI_DIR, CONTEXT_DIR]:
            os.makedirs(dirname, exist_ok=True)
        print("‚úÖ M√¥i tr∆∞·ªùng ƒë√£ s·∫µn s√†ng.")
    except Exception as e:
        print(f"‚ùå L·ªói khi thi·∫øt l·∫≠p: {e}"); return

    # 2. Nh·∫≠p th√¥ng tin
    print("\n--- B∆∞·ªõc 2: Nh·∫≠p th√¥ng tin c·∫ßn thi·∫øt ---")
    bili_urls = []
    print("Nh·∫≠p link video/playlist Bilibili (nh·∫≠p 'done' khi xong):")
    while True:
        url = input("> ")
        if url.lower() == 'done': break
        if url.strip(): bili_urls.append(url.strip())

    github_token = getpass.getpass("Nh·∫≠p GitHub Personal Access Token: ")
    repo_url = input(f"Nh·∫≠p URL repo GitHub (m·∫∑c ƒë·ªãnh: {DEFAULT_REPO_URL}): ") or DEFAULT_REPO_URL
    try:
        owner, repo, branch = parse_github_url(repo_url)
        github_srt_dir = select_github_dir_interactive(owner, repo, github_token)
        github_details = {
            "owner": owner, "repo": repo, "branch": branch,
            "token": github_token, "dir": github_srt_dir
        }
    except Exception as e:
        print(f"‚ùå L·ªói khi x·ª≠ l√Ω th√¥ng tin GitHub: {e}"); return

    # 3. Kh·ªüi ch·∫°y c√°c lu·ªìng
    print("\n--- B∆∞·ªõc 3: Kh·ªüi ch·∫°y c√°c lu·ªìng ---")
    stop_event = threading.Event()
    threads = []
    if bili_urls:
        downloader = threading.Thread(target=downloader_thread_func, args=(bili_urls, UPLOAD_DIR))
        threads.append(downloader)
        downloader.start()
    processor = threading.Thread(target=processing_thread_func, args=(stop_event, github_details))
    threads.append(processor)
    processor.start()

    # 4. Ch·ªù ƒë·ª£i v√† k·∫øt th√∫c
    print("\n--- B∆∞·ªõc 4: Ch∆∞∆°ng tr√¨nh ƒëang ch·∫°y ---")
    print("Nh·∫•n CTRL+C trong terminal ho·∫∑c n√∫t STOP trong Colab ƒë·ªÉ d·ª´ng.")
    try:
        # Ch·ªù lu·ªìng t·∫£i xu·ªëng ho√†n t·∫•t (n·∫øu n√≥ ƒë∆∞·ª£c kh·ªüi ch·∫°y)
        if 'downloader' in locals() and downloader.is_alive():
            downloader.join()
        # Gi·ªØ ch∆∞∆°ng tr√¨nh ch√≠nh s·ªëng trong khi lu·ªìng x·ª≠ l√Ω ho·∫°t ƒë·ªông
        while processor.is_alive():
            processor.join(timeout=1)
    except KeyboardInterrupt:
        print("\nüõë ƒê√£ nh·∫≠n t√≠n hi·ªáu d·ª´ng. ƒêang ƒë√≥ng c√°c lu·ªìng...")
        stop_event.set()
        for t in threads:
            if t.is_alive(): t.join()
        print("‚úÖ T·∫•t c·∫£ c√°c lu·ªìng ƒë√£ ƒë∆∞·ª£c ƒë√≥ng.")

if __name__ == "__main__":
    main()
